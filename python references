+======================================================+
standard py conditional statement
+======================================================+

--------------------------------------------------------------------------------------------
# Assign `approved_list` to a list of approved usernames

approved_list = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab"]

# Assign `username` to the username of a specific user trying to log in

username = "bmoreno"

# Assign `organization_hours` to a Boolean value that represents whether the user is trying to log in during organization hours

organization_hours = True

# If the user is among the approved users and they are logging in during organization hours, then convey that the user is logged in
# Otherwise, convey that either the username is not approved or the login attempt was made outside of organization hours

if username in approved_list and organization_hours == True:
    print("Login attempt made by an approved user during organization hours.")
else:
    print("Username not approved or login attempt made outside of organization hours.")
--------------------------------------------------------------------------------------------

+======================================================+
standard py loop
+======================================================+
--------------------------------------------------------------------------------------------
# Iterative statement using `for`, `range()`, and a loop variable of `i`
# Display "Connection could not be established." three times

for i in range(3):
    print("Connection could not be established.")
--------------------------------------------------------------------------------------------


+======================================================+
standard while loop
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `connection_attempts` to an initial value of 0
connection_attempts = 0

# Maximum number of attempts you want to make before stopping the loop


# Iterative statement using `while` and `connection_attempts`
while connection_attempts < 5:  # This condition will stop the loop after 5 attempts
    print("Connection could not be established.")
    
    # Update `connection_attempts` (increment it by 1 at the end of each iteration) 
    connection_attempts = connection_attempts + 1

--------------------------------------------------------------------------------------------
+======================================================+
standard for loop for an array
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `ip_addresses` to a list of IP addresses
ip_addresses = ["192.168.142.245", "192.168.109.50", "192.168.86.232", "192.168.131.147",
                "192.168.205.12", "192.168.200.48"]

# For loop that displays the elements of `ip_addresses` one at a time
for ip_address in ip_addresses:
    print(ip_address)
--------------------------------------------------------------------------------------------
+======================================================+
standard if in a for loop
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `allow_list` to a list of allowed IP addresses
allow_list = ["192.168.243.140", "192.168.205.12", "192.168.151.162", "192.168.178.71", 
              "192.168.86.232", "192.168.3.24", "192.168.170.243", "192.168.119.173"]

# Assign `ip_addresses` to a list of IP addresses from which users have tried to log in
ip_addresses = ["192.168.142.245", "192.168.109.50", "192.168.86.232", "192.168.131.147",
                "192.168.205.12", "192.168.200.48"]

# For each IP address in the list of IP addresses from which users have tried to log in
# If it is among the allowed addresses, then display “IP address is allowed”
# Otherwise, display “IP address is not allowed”

for ip_address in ip_addresses:
    if ip_address in allow_list:
        print(f"{ip_address} is allowed.")
    else:
        print(f"{ip_address} is not allowed.")

OUTPUT:
-------------------------------------------------
192.168.142.245 is not allowed.
192.168.109.50 is not allowed.
192.168.86.232 is allowed.
192.168.131.147 is not allowed.
192.168.205.12 is allowed.
192.168.200.48 is not allowed.
--------------------------------------------------------------------------------------------
+======================================================+
standard if/else in a for loop
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `allow_list` to a list of allowed IP addresses
allow_list = ["192.168.243.140", "192.168.205.12", "192.168.151.162", "192.168.178.71", 
              "192.168.86.232", "192.168.3.24", "192.168.170.243", "192.168.119.173"]

# Assign `ip_addresses` to a list of IP addresses from which users have tried to log in
ip_addresses = ["192.168.142.245", "192.168.109.50", "192.168.86.232", "192.168.131.147",
                "192.168.205.12", "192.168.200.48"]

# For each IP address in the list of IP addresses from which users have tried to log in
# If it is among the allowed addresses, then display “IP address is allowed”
# Otherwise, display “IP address is not allowed”
               
for ip_address in ip_addresses:
    if ip_address in allow_list:
        print(f"{ip_address} is allowed.")
    else:
        print(f"{ip_address} is not allowed.")

OUTPUT:
--------------------------------------------------------------------------------------------
192.168.142.245 is not allowed.
192.168.109.50 is not allowed.
192.168.86.232 is allowed.
192.168.131.147 is not allowed.
192.168.205.12 is allowed.
192.168.200.48 is not allowed.
--------------------------------------------------------------------------------------------

+======================================================+
standard while loop with integers and conditions
+======================================================+
--------------------------------------------------------------------------------------------
# Assign the loop variable `i` to an initial value of 5000
i = 5000

# While loop that generates unique employee IDs for the Sales department by iterating through numbers
# and displays each ID created

while i <= 5150: 
    # Check if `i` is divisible by 5 and falls within the range of 5000 to 5150
    if i % 5 == 0 and 5000 <= i <= 5150:
        print(f"Employee ID: SALES{i}")
    
    # Increment `i` by 1 at the end of each iteration
    i += 1

OUTPUT:
--------------------------------------------------------------------------------------------
Employee ID: SALES5000
Employee ID: SALES5005
Employee ID: SALES5010
Employee ID: SALES5015
Employee ID: SALES5020
Employee ID: SALES5025
Employee ID: SALES5030
Employee ID: SALES5035
Employee ID: SALES5040
Employee ID: SALES5045
Employee ID: SALES5050
Employee ID: SALES5055
Employee ID: SALES5060
Employee ID: SALES5065
Employee ID: SALES5070
Employee ID: SALES5075
Employee ID: SALES5080
Employee ID: SALES5085
Employee ID: SALES5090
Employee ID: SALES5095
Employee ID: SALES5100
Employee ID: SALES5105
Employee ID: SALES5110
Employee ID: SALES5115
Employee ID: SALES5120
Employee ID: SALES5125
Employee ID: SALES5130
Employee ID: SALES5135
Employee ID: SALES5140
Employee ID: SALES5145
Employee ID: SALES5150
--------------------------------------------------------------------------------------------
+======================================================+
standard while loop with integers and conditions
+======================================================+
--------------------------------------------------------------------------------------------
# Assign the loop variable `i` to an initial value of 5000
i = 5000

# While loop that generates unique employee IDs for the Sales department by iterating through numbers
# and displays each ID created
# This loop displays "Only 10 valid employee IDs remaining" once `i` reaches 5100

while i <= 5150: 
    print(i)
    if i >= 5100 and i % 5 == 0:
        print("Only 10 valid employee IDs remaining")
    i = i + 5

OUTPUT:
--------------------------------------------------------------------------------------------
5000
5005
5010
...
5095
5100
Only 10 valid employee IDs remaining
5105
5110
...
5140
5145
5150
--------------------------------------------------------------------------------------------
+======================================================+
Defining a funciton
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `alert()` 

def alert():
    print("Potential security issue. Investigate further.")
--------------------------------------------------------------------------------------------
+======================================================+
Define and call a function
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `alert()` 

def alert():
    print("Potential security issue. Investigate further.")

# Call the `alert()` function

alert();
--------------------------------------------------------------------------------------------
+======================================================+
function in a for loop
+======================================================+
--------------------------------------------------------------------------------------------
def alert(): 
    for i in range(3):
        print("Potential security issue. Investigate further.")

# Call the `alert()` function

alert();
--------------------------------------------------------------------------------------------
+======================================================+
Standard list to string with function
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `list_to_string()`
def list_to_string():
    # Store the list of approved usernames in a variable named `username_list`
    username_list = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab", "gesparza", "alevitsk", "wjaffrey"]

    # Write a for loop that iterates through the elements of `username_list` and displays each element
    for username in username_list:
        print(username)

# Call the `list_to_string()` function
list_to_string()

OUTPUT:
elarson
bmoreno
tshah
sgilmore
eraab
gesparza
alevitsk
wjaffrey
--------------------------------------------------------------------------------------------
+======================================================+
Concatenation
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `list_to_string()`
def list_to_string():
    # Store the list of approved usernames in a variable named `username_list`
    username_list = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab", "gesparza", "alevitsk", "wjaffrey"]
    
    # Assign `sum_variable` to an empty string
    sum_variable = ""

    # Write a for loop that iterates through the elements of `username_list` and displays each element
    for username in username_list:
        sum_variable = sum_variable + username

    # Display the value of `sum_variable`
    print(sum_variable)

# Call the `list_to_string()` function
list_to_string()

OUTPUT:
elarsonbmorenotshahsgilmoreeraabgesparzaalevitskwjaffrey

--------------------------------------------------------------------------------------------
+======================================================+
sorting by ascending
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `failed_login_list` to the list of the number of failed login attempts per month
failed_login_list = [119, 101, 99, 91, 92, 105, 108, 85, 88, 90, 264, 223]

# Sort `failed_login_list` in ascending numerical order and display the result
print(sorted(failed_login_list))

--------------------------------------------------------------------------------------------
+======================================================+
Select Highes number
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `failed_login_list` to the list of the number of failed login attempts per month
failed_login_list = [119, 101, 99, 91, 92, 105, 108, 85, 88, 90, 264, 223]

# Determine the highest number of failed login attempts from `failed_login_list` and display the result
print(max(failed_login_list))
--------------------------------------------------------------------------------------------
+======================================================+
declaring functions with miltiple parameters 
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in two parameters, `username` and `current_day_logins`
def analyze_logins(username, current_day_logins):
    # Display a message about how many login attempts the user has made that day
    print("Current day login total for", username, "is", current_day_logins)

--------------------------------------------------------------------------------------------
+======================================================+
Calling functions with miltiple parameters 
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in two parameters, `username` and `current_day_logins`

def analyze_logins(username, current_day_logins):

    # Display a message about how many login attempts the user has made that day

    print("Current day login total for", username, "is", current_day_logins)

# Call `analyze_logins()`
username = "ejones"
current_day_logins = 9

analyze_logins(username, current_day_logins);

--------------------------------------------------------------------------------------------
+======================================================+
multiple statements with functions
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`
def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day
    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about the average number of login attempts the user has made that day
    print("Average logins per day for", username, "is", average_day_logins)

# Call `analyze_logins()`
analyze_logins("john_doe", 5, 3)
--------------------------------------------------------------------------------------------
+======================================================+
multiple statements and math with functions
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`
def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day
    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about the average number of login attempts the user has made that day
    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`
    login_ratio = current_day_logins / average_day_logins

    # Display a message about the ratio
    print(username, "logged in", login_ratio, "times as much as they do on an average day.")

# Call `analyze_logins()`
analyze_logins("john_doe", 5, 3)

--------------------------------------------------------------------------------------------
+======================================================+
multiple statements and math with functions extended
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`
def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day
    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day
    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`
    login_ratio = current_day_logins / average_day_logins

    # Return the ratio
    return login_ratio

# Call `analyze_logins()` and store the output in a variable named `login_analysis`
login_analysis = analyze_logins("ejones", 9, 3)

# Display a message about the `login_analysis`
print("ejones", "logged in", login_analysis, "times as much as they do on an average day.")

--------------------------------------------------------------------------------------------
+======================================================+
multiple statements and math with functions extended
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `analyze_logins()` that takes in three parameters, `username`, `current_day_logins`, and `average_day_logins`
def analyze_logins(username, current_day_logins, average_day_logins):

    # Display a message about how many login attempts the user has made that day
    print("Current day login total for", username, "is", current_day_logins)

    # Display a message about average number of login attempts the user has made that day
    print("Average logins per day for", username, "is", average_day_logins)

    # Calculate the ratio of the logins made on the current day to the logins made on an average day, storing in a variable named `login_ratio`
    login_ratio = current_day_logins / average_day_logins

    # Return the ratio
    return login_ratio

# Call `analyze_logins()` and store the output in a variable named `login_analysis`
login_analysis = analyze_logins("ejones", 9, 3)

# Conditional statement that displays an alert about the login activity if it's more than normal
if login_analysis >= 3:
    print("Alert! This account has more login activity than normal.")

--------------------------------------------------------------------------------------------

+======================================================+
reading a file without normalizing it
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that contains the security log file
import_file = "login.txt"

# The `with` statement
# Use `open()` to import security log file and store it as a string
with open(import_file, "r") as file:
    # Use `.read()` to read the imported file and store the result in a variable named `text`
    text = file.read()

# Display the contents of `text` split into separate lines 
lines = text.splitlines()
print(lines)

OUTPUT:

['username,ip_address,time,date', 'tshah,192.168.92.147,15:26:08,2022-05-10', 'dtanaka,192.168.98.221,9:45:18,2022-05-09', 'tmitchel,192.168.110.131,14:13:41,2022-05-11', 'daquino,192.168.168.144,7:02:35,2022-05-08', 'eraab,192.168.170.243,1:45:14,2022-05-11', 'jlansky,192.168.238.42,1:07:11,2022-05-11', 'acook,192.168.52.90,9:56:48,2022-05-10', 'asundara,192.168.58.217,23:17:52,2022-05-12', 'jclark,192.168.214.49,20:49:00,2022-05-10', 'cjackson,192.168.247.153,19:36:42,2022-05-12', 'jclark,192.168.197.247,14:11:04,2022-05-12', 'apatel,192.168.46.207,17:39:42,2022-05-10', 'mabadi,192.168.96.244,10:24:43,2022-05-12', 'iuduike,192.168.131.147,17:50:00,2022-05-11', 'abellmas,192.168.60.111,13:37:05,2022-05-10', 'gesparza,192.168.148.80,6:30:14,2022-05-11', 'cgriffin,192.168.4.157,23:04:05,2022-05-09', 'alevitsk,192.168.210.228,8:10:43,2022-05-08', 'eraab,192.168.24.12,11:29:27,2022-05-11', 'jsoto,192.168.25.60,5:09:21,2022-05-09']
--------------------------------------------------------------------------------------------
+======================================================+
comparing length of string as condition
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `employee_id` to a four-digit number as an initial value
employee_id = 4186

# Reassign `employee_id` to the same value but in the form of a string
employee_id = str(employee_id)

# Conditional statement that displays a message if the length of `employee_id` is less than five digits
if len(employee_id) < 5:
    print("This employee ID has less than five digits. It does not meet length requirements.")

--------------------------------------------------------------------------------------------

+======================================================+
Concatenating a string value as an output
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `employee_id` to a four-digit number as an initial value
employee_id = 4186

# Reassign `employee_id` to the same value but in the form of a string
employee_id = str(employee_id)

# Display the `employee_id` as it currently stands
print(employee_id)

# Conditional statement that updates the `employee_id` if its length is less than 5 digits
if len(employee_id) < 5:
    employee_id = "E" + employee_id

# Display the `employee_id` after the update
print(employee_id)


--------------------------------------------------------------------------------------------

+======================================================+
Index of a character
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `device_id` to a string that contains alphanumeric characters
device_id = "r262c36"

# Extract the fourth character in `device_id` and display it
print(device_id[3])

--------------------------------------------------------------------------------------------

+======================================================+
print a range of characters from part of a string
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `device_id` to a string that contains alphanumeric characters
device_id = "r262c36"

# Extract the first through the third characters in `device_id` and display the result
print(device_id[0:3])


--------------------------------------------------------------------------------------------

+======================================================+
slicing the first part of a string
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `url` to a specific URL
url = "https://exampleURL1.com"

# Extract the protocol of `url` along with the syntax following it, display the result
protocol_and_syntax = url[:8]  # Assuming the protocol is always "https" (8 characters)
print(protocol_and_syntax)

--------------------------------------------------------------------------------------------

+======================================================+
slicing the end part of a string

+======================================================+
--------------------------------------------------------------------------------------------
# Assign `url` to a specific URL

url = "https://exampleURL1.com"

# Display the index where the domain extension ".com" is located in `url`

print(url[-4:])

--------------------------------------------------------------------------------------------

+======================================================+
More slicing
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `url` to a specific URL

url = "https://exampleURL1.com"

# Assign `ind` to the output of applying `.index()` to `url` in order to extract the starting index of ".com" in `url` 

ind = url.index(".com")

# Extract the domain extension in `url` and display it

print(url[ind:ind+4])


--------------------------------------------------------------------------------------------

+======================================================+
extract between a string
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `url` to a specific URL

url = "https://exampleURL1.com"

# Assign `ind` to the output of applying `.index()` to `url` in order to extract the starting index of ".com" in `url` 

ind = url.index(".com")

# Extract the website name in `url` and display it

print(url[8:-4:])

--------------------------------------------------------------------------------------------

+======================================================+
indices in lists
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "2ye3lzg", "4n482ts", "a307vir"]

# Display the element at the specified index in `approved_users`
print(approved_users[0])

# Display the element at the specified index in `approved_devices`
print(approved_devices[0])


--------------------------------------------------------------------------------------------

+======================================================+
append new objects to lists
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "2ye3lzg", "4n482ts", "a307vir"]

# Assign `new_user` to the username of a new approved user
new_user = "gesparza"

# Assign `new_device` to the device ID of the new approved user
new_device = "3rcv4w6"

# Add that user's username and device ID to `approved_users` and `approved_devices` respectively
approved_users.append(new_user)
approved_devices.append(new_device)

# Display the contents of `approved_users`
print(approved_users)

# Display the contents of `approved_devices`
print(approved_devices)


--------------------------------------------------------------------------------------------

+======================================================+
remove new objects to lists
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "tshah", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "2ye3lzg", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `removed_user` to the username of the employee who has left the team
removed_user = "tshah"

# Assign `removed_device` to the device ID of the employee who has left the team
removed_device = "2ye3lzg"

# Remove that employee's username and device ID from `approved_users` and `approved_devices` respectively
approved_users.remove(removed_user)
approved_devices.remove(removed_device)

# Display `approved_users`
print(approved_users)

# Display `approved_devices`
print(approved_devices)

--------------------------------------------------------------------------------------------

+======================================================+
list validation
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `username` to a username
username = "sgilmore"

# Conditional statement
# If `username` belongs to `approved_users`, then display "The user ______ is approved to access the system."
# Otherwise display "The user ______ is not approved to access the system."
if username in approved_users:
    print("The user", username, "is approved to access the system.")
else:
    print("The user", username, "is not approved to access the system.")


--------------------------------------------------------------------------------------------

+======================================================+
find object position in list
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `username` to a username
username = "sgilmore"

# Assign `ind` to the index of `username` in `approved_users`
ind = approved_users.index(username)

# Display the value of `ind`
print(ind)


--------------------------------------------------------------------------------------------
+======================================================+
display corresponding info on lists from other lists
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `username` to a username
username = "sgilmore"

# Assign `ind` to the index of `username` in `approved_users`
ind = approved_users.index(username)

# Display the device ID at the index that matches the value of `ind` in `approved_devices`
print(approved_devices[ind])


--------------------------------------------------------------------------------------------
+======================================================+
string manipulation and list validation with conditions
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `username` to a username
username = "sgilmore"

# Assign `device_id` to a device ID
device_id = "4n482ts"

# Assign `ind` to the index of `username` in `approved_users`
ind = approved_users.index(username)

# Conditional statement
# If `username` belongs to `approved_users`, and if the device ID at `ind` in `approved_devices` matches `device_id`,
# then display a message that the username is approved,
# followed by a message that the user has the correct device

if username in approved_users and approved_devices[ind] == device_id:
    print("The username", username, "is approved to access the system.")
    print(device_id, "is the assigned device for", username)


--------------------------------------------------------------------------------------------
+======================================================+
using elif for validation
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Assign `username` to a username
username = "sgilmore"

# Assign `device_id` to a device ID
device_id = "4n482ts"

# Assign `ind` to the index of `username` in `approved_users`
ind = approved_users.index(username)

# If statement
# If `username` belongs to `approved_users`, and if the element at `ind` in `approved_devices` matches `device_id`,
# then display a message that the username is approved,
# followed by a message that the user has the correct device

if username in approved_users and device_id == approved_devices[ind]:
    print("The user", username, "is approved to access the system.")
    print(device_id, "is the assigned device for", username)

# Elif statement
# Handles the case when `username` belongs to `approved_users` but element at `ind` in `approved_devices` does not match `device_id`,
# and displays two messages accordingly

elif username in approved_users and device_id != approved_devices[ind]:
    print("The user", username, "is approved to access the system, but", device_id, "is not their assigned device.")


--------------------------------------------------------------------------------------------
+======================================================+
more validation
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `approved_users` to a list of approved usernames
approved_users = ["elarson", "bmoreno", "sgilmore", "eraab", "gesparza"]

# Assign `approved_devices` to a list of device IDs that correspond to the usernames in `approved_users`
approved_devices = ["8rp2k75", "hl0s5o1", "4n482ts", "a307vir", "3rcv4w6"]

# Define a function named `login` that takes in two parameters, `username` and `device_id`
def login(username, device_id):
    # If `username` belongs to `approved_users`,
    if username in approved_users:
        # then display "The user ______ is approved to access the system.",
        print("The user", username, "is approved to access the system.")
        # assign `ind` to the index of `username` in `approved_users`,
        ind = approved_users.index(username)
        # and execute the following conditional
        # If `device_id` matches the element at the index `ind` in `approved_devices`,
        if device_id == approved_devices[ind]:
            # then display "______ is the assigned device for ______"
            print(device_id, "is the assigned device for", username)
        # Otherwise,
        else:
            # display "______ is not their assigned device"
            print(device_id, "is not their assigned device.")
    # Otherwise (part of the outer conditional and handles the case when `username` does not belong to `approved_users`),
    else:
        # Display "The user ______ is not approved to access the system."
        print("The username", username, "is not approved to access the system.")

# Call the function you just defined to experiment with different username and device_id combinations

# Example 1: Approved username and correct device ID
login("sgilmore", "4n482ts")

# Example 2: Approved username and incorrect device ID
login("sgilmore", "a307vir")

# Example 3: Username not approved
login("unknown_user", "4n482ts")


--------------------------------------------------------------------------------------------
+======================================================+
import regular expression (regex)
+======================================================+
--------------------------------------------------------------------------------------------
# Import the `re` module in Python

import re

--------------------------------------------------------------------------------------------

+======================================================+
using regex to find a pattern
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `devices` to a string containing device IDs, each device ID represented by alphanumeric characters
import re
devices = "r262c36 67bv8fy 41j1u2e r151dm4 1270t3o 42dr56i r15xk9h 2j33krk 253be78 ac742a1 r15u9q5 zh86b2l ii286fq 9x482kt 6oa6m6u x3463ac i4l56nq g07h55q 081qc9t r159r1u"

# Assign `target_pattern` to a regular expression pattern for finding device IDs that start with "r15"

target_pattern = "r15\w+"

# Use `re.findall()` to find the device IDs that start with "r15" and display the results

print(re.findall(target_pattern, devices))

--------------------------------------------------------------------------------------------
+======================================================+
using \n
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `log_file` to a string containing username, date, login time, and IP address for a series of login attempts 

log_file = "eraab 2022-05-10 6:03:41 192.168.152.148 \niuduike 2022-05-09 6:46:40 192.168.22.115 \nsmartell 2022-05-09 19:30:32 192.168.190.178 \narutley 2022-05-12 17:00:59 1923.1689.3.24 \nrjensen 2022-05-11 0:59:26 192.168.213.128 \naestrada 2022-05-09 19:28:12 1924.1680.27.57 \nasundara 2022-05-11 18:38:07 192.168.96.200 \ndkot 2022-05-12 10:52:00 1921.168.1283.75 \nabernard 2022-05-12 23:38:46 19245.168.2345.49 \ncjackson 2022-05-12 19:36:42 192.168.247.153 \njclark 2022-05-10 10:48:02 192.168.174.117 \nalevitsk 2022-05-08 12:09:10 192.16874.1390.176 \njrafael 2022-05-10 22:40:01 192.168.148.115 \nyappiah 2022-05-12 10:37:22 192.168.103.10654 \ndaquino 2022-05-08 7:02:35 192.168.168.144"

# Display contents of `log_file`

print(log_file)

--------------------------------------------------------------------------------------------

+======================================================+
finding more patterns
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `log_file` to a string containing username, date, login time, and IP address for a series of login attempts 

log_file = "eraab 2022-05-10 6:03:41 192.168.152.148 \niuduike 2022-05-09 6:46:40 192.168.22.115 \nsmartell 2022-05-09 19:30:32 192.168.190.178 \narutley 2022-05-12 17:00:59 1923.1689.3.24 \nrjensen 2022-05-11 0:59:26 192.168.213.128 \naestrada 2022-05-09 19:28:12 1924.1680.27.57 \nasundara 2022-05-11 18:38:07 192.168.96.200 \ndkot 2022-05-12 10:52:00 1921.168.1283.75 \nabernard 2022-05-12 23:38:46 19245.168.2345.49 \ncjackson 2022-05-12 19:36:42 192.168.247.153 \njclark 2022-05-10 10:48:02 192.168.174.117 \nalevitsk 2022-05-08 12:09:10 192.16874.1390.176 \njrafael 2022-05-10 22:40:01 192.168.148.115 \nyappiah 2022-05-12 10:37:22 192.168.103.10654 \ndaquino 2022-05-08 7:02:35 192.168.168.144"

# Assign `pattern` to a regular expression pattern that will match with IP addresses of the form xxx.xxx.xxx.xxx

pattern = "\d\d\d\.\d\d\d\.\d\d\d\.\d\d\d"

# Use the `re.findall()` function on `pattern` and `log_file` to extract the IP addresses of the form xxx.xxx.xxx.xxx and display the results

print(re.findall(pattern, log_file))

--------------------------------------------------------------------------------------------
+======================================================+
more vague use of findall for more broad results
+======================================================+
--------------------------------------------------------------------------------------------

# Assign `log_file` to a string containing username, date, login time, and IP address for a series of login attempts 

log_file = "eraab 2022-05-10 6:03:41 192.168.152.148 \niuduike 2022-05-09 6:46:40 192.168.22.115 \nsmartell 2022-05-09 19:30:32 192.168.190.178 \narutley 2022-05-12 17:00:59 1923.1689.3.24 \nrjensen 2022-05-11 0:59:26 192.168.213.128 \naestrada 2022-05-09 19:28:12 1924.1680.27.57 \nasundara 2022-05-11 18:38:07 192.168.96.200 \ndkot 2022-05-12 10:52:00 1921.168.1283.75 \nabernard 2022-05-12 23:38:46 19245.168.2345.49 \ncjackson 2022-05-12 19:36:42 192.168.247.153 \njclark 2022-05-10 10:48:02 192.168.174.117 \nalevitsk 2022-05-08 12:09:10 192.16874.1390.176 \njrafael 2022-05-10 22:40:01 192.168.148.115 \nyappiah 2022-05-12 10:37:22 192.168.103.10654 \ndaquino 2022-05-08 7:02:35 192.168.168.144"

# Update `pattern` to a regular expression pattern that will match with IP addresses with any variation in the number of digits per segment

pattern = "\d+\.\d+\.\d+\.\d+"

# Use the `re.findall()` function on `pattern` and `log_file` to extract the IP addresses of the updated form specifed above and display the results

print(re.findall(pattern, log_file))
--------------------------------------------------------------------------------------------

+======================================================+
using range in a pattern
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `log_file` to a string containing username, date, login time, and IP address for a series of login attempts 

log_file = "eraab 2022-05-10 6:03:41 192.168.152.148 \niuduike 2022-05-09 6:46:40 192.168.22.115 \nsmartell 2022-05-09 19:30:32 192.168.190.178 \narutley 2022-05-12 17:00:59 1923.1689.3.24 \nrjensen 2022-05-11 0:59:26 192.168.213.128 \naestrada 2022-05-09 19:28:12 1924.1680.27.57 \nasundara 2022-05-11 18:38:07 192.168.96.200 \ndkot 2022-05-12 10:52:00 1921.168.1283.75 \nabernard 2022-05-12 23:38:46 19245.168.2345.49 \ncjackson 2022-05-12 19:36:42 192.168.247.153 \njclark 2022-05-10 10:48:02 192.168.174.117 \nalevitsk 2022-05-08 12:09:10 192.16874.1390.176 \njrafael 2022-05-10 22:40:01 192.168.148.115 \nyappiah 2022-05-12 10:37:22 192.168.103.10654 \ndaquino 2022-05-08 7:02:35 192.168.168.144"

# Assign `pattern` to a regular expression that matches with all valid IP addresses and only those 

pattern = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"

# Use `re.findall()` on `pattern` and `log_file` and assign `valid_ip_addresses` to the output 

valid_ip_addresses = re.findall(pattern, log_file)

# Display the contents of `valid_ip_addresses`

print(valid_ip_addresses)

--------------------------------------------------------------------------------------------
+======================================================+
conditional statements with findall
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `log_file` to a string containing username, date, login time, and IP address for a series of login attempts 

log_file = "eraab 2022-05-10 6:03:41 192.168.152.148 \niuduike 2022-05-09 6:46:40 192.168.22.115 \nsmartell 2022-05-09 19:30:32 192.168.190.178 \narutley 2022-05-12 17:00:59 1923.1689.3.24 \nrjensen 2022-05-11 0:59:26 192.168.213.128 \naestrada 2022-05-09 19:28:12 1924.1680.27.57 \nasundara 2022-05-11 18:38:07 192.168.96.200 \ndkot 2022-05-12 10:52:00 1921.168.1283.75 \nabernard 2022-05-12 23:38:46 19245.168.2345.49 \ncjackson 2022-05-12 19:36:42 192.168.247.153 \njclark 2022-05-10 10:48:02 192.168.174.117 \nalevitsk 2022-05-08 12:09:10 192.16874.1390.176 \njrafael 2022-05-10 22:40:01 192.168.148.115 \nyappiah 2022-05-12 10:37:22 192.168.103.10654 \ndaquino 2022-05-08 7:02:35 192.168.168.144"

# Assign `pattern` to a regular expression that matches with all valid IP addresses and only those 

pattern = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"

# Use `re.findall()` on `pattern` and `log_file` and assign `valid_ip_addresses` to the output 

valid_ip_addresses = re.findall(pattern, log_file)

# Assign `flagged_addresses` to a list of IP addresses that have been previously flagged for unusual activity

flagged_addresses = ["192.168.190.178", "192.168.96.200", "192.168.174.117", "192.168.168.144"]

# Iterative statement begins here
# Loop through `valid_ip_addresses` with `address` as the loop variable

for address in valid_ip_addresses:

    # Conditional begins here
    # If `address` belongs to `flagged_addresses`, display "The IP address ______ has been flagged for further analysis."

    if address in flagged_addresses:
        print("The IP address", address, "has been flagged for further analysis.")

    # Otherwise, display "The IP address ______ does not require further analysis."

    else:
        print("The IP address", address, "does not require further analysis.")
+======================================================+
Import and parse a text file
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that contains the security log file
import_file = "login.txt"

# The `with` statement
# Use `open()` to import security log file and store it as a string
with open(import_file, "r") as file:
  # Use `.read()` to read the imported file and store the result in a variable named `text`
  text = file.read()

# Display the contents of `text`
print(text)


OUTPUT:
username,ip_address,time,date
tshah,192.168.92.147,15:26:08,2022-05-10
dtanaka,192.168.98.221,9:45:18,2022-05-09
tmitchel,192.168.110.131,14:13:41,2022-05-11
daquino,192.168.168.144,7:02:35,2022-05-08
eraab,192.168.170.243,1:45:14,2022-05-11
jlansky,192.168.238.42,1:07:11,2022-05-11
acook,192.168.52.90,9:56:48,2022-05-10
asundara,192.168.58.217,23:17:52,2022-05-12
jclark,192.168.214.49,20:49:00,2022-05-10
cjackson,192.168.247.153,19:36:42,2022-05-12
jclark,192.168.197.247,14:11:04,2022-05-12
apatel,192.168.46.207,17:39:42,2022-05-10
mabadi,192.168.96.244,10:24:43,2022-05-12
iuduike,192.168.131.147,17:50:00,2022-05-11
abellmas,192.168.60.111,13:37:05,2022-05-10
gesparza,192.168.148.80,6:30:14,2022-05-11
cgriffin,192.168.4.157,23:04:05,2022-05-09
alevitsk,192.168.210.228,8:10:43,2022-05-08
eraab,192.168.24.12,11:29:27,2022-05-11
jsoto,192.168.25.60,5:09:21,2022-05-09
--------------------------------------------------------------------------------------------
+======================================================+
using .read()
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that contains the security log file

import_file = "data/login.txt"

# The`with` statement
# Use `open()` to import security log file and store it as a string

with open(import_file, "r") as file:

  # Use `.read()` to read the imported file and store the result in a variable named `text`

  text = file.read()

# Display the contents of `text`

print(text)
--------------------------------------------------------------------------------------------

+======================================================+
using .write()
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that contains the security log file

import_file = "data/login.txt"

# Assign `missing entry` to a log that was not recorded in the log file

missing_entry = "jrafael,192.168.243.140,4:56:27,2022-05-09"

# Use `open()` to import security log file and store it as a string
# Pass in "a" as the second parameter to indicate that the file is being opened for appending purposes

with open(import_file, "a") as file:

    # Use `.write()` to append `missing_entry` to the log file

    file.write(missing_entry)

# Use `open()` with the parameter "r" to open the security log file for reading purposes

with open(import_file, "r") as file:

    # Use `.read()` to read in the contents of the log file and store in a variable named `text`

    text = file.read()

# Display the contents of `text`

print(text)
--------------------------------------------------------------------------------------------

+======================================================+
creating file with py and adding text
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that you want to create

import_file = "data/allow_list.txt"

# Assign `ip_addresses` to a list of IP addresses that are allowed to access the restricted information

ip_addresses = "192.168.218.160 192.168.97.225 192.168.145.158 192.168.108.13 192.168.60.153 192.168.96.200 192.168.247.153 192.168.3.252 192.168.116.187 192.168.15.110 192.168.39.246"

# Create a `with` statement to write to the text file 

with open(import_file, "w") as file:

  # Write `ip_addresses` to the text file

  file.write(ip_addresses)
--------------------------------------------------------------------------------------------

+======================================================+
assinging text to a file and printig it out
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the text file that you want to create

import_file = "data/allow_list.txt"

# Assign `ip_addresses` to a list of IP addresses that are allowed to access the restricted information

ip_addresses = "192.168.218.160 192.168.97.225 192.168.145.158 192.168.108.13 192.168.60.153 192.168.96.200 192.168.247.153 192.168.3.252 192.168.116.187 192.168.15.110 192.168.39.246"

# Create a `with` statement to write to the text file 

with open(import_file, "w") as file:

    # Write `ip_addresses` to the text file

    file.write(ip_addresses)

# Create a `with` statement to read in the text file 

with open(import_file, "r") as file:

    # Read the file and store the result in a variable named `text`

    text = file.read()

# Display the contents of `text`

print(text)
--------------------------------------------------------------------------------------------


+======================================================+
converting list value to a string to be manipulated
+======================================================+
--------------------------------------------------------------------------------------------
# Assign `import_file` to the name of the file 

import_file = "data/allow_list.txt"

# Assign `remove_list` to a list of IP addresses that are no longer allowed to access restricted information. 

remove_list = ["192.168.97.225", "192.168.158.170", "192.168.201.40", "192.168.58.57"]

# Build `with` statement to read in the initial contents of the file

with open(import_file, "r") as file:

    # Use `.read()` to read the imported file and store it in a variable named `ip_addresses`

    ip_addresses = file.read()

# Use `.split()` to convert `ip_addresses` from a string to a list

ip_addresses = ip_addresses.split()

# Display `ip_addresses`

print(ip_addresses)
--------------------------------------------------------------------------------------------

+======================================================+
Updating text inside a file
+======================================================+
--------------------------------------------------------------------------------------------
# Define a function named `update_file` that takes in two parameters: `import_file` and `remove_list`
# and combines the steps you've written in this lab leading up to this

def update_file(import_file, remove_list):

    # Build `with` statement to read in the initial contents of the file

    with open(import_file, "r") as file:

        # Use `.read()` to read the imported file and store it in a variable named `ip_addresses`

        ip_addresses = file.read()

    # Use `.split()` to convert `ip_addresses` from a string to a list

    ip_addresses = ip_addresses.split()

    # Build iterative statement
    # Name loop variable `element`
    # Loop through `remove_list`

    for element in remove_list:
    
        # Create conditional statement to evaluate if `element` is in `ip_addresses`

        if element in ip_addresses:

            # use the `.remove()` method to remove
            # elements from `ip_addresses`

            ip_addresses.remove(element)

    # Convert `ip_addresses` back to a string so that it can be written into the text file

    ip_addresses = "\n".join(ip_addresses)

    # Build `with` statement to rewrite the original file

    with open(import_file, "w") as file:

        # Rewrite the file, replacing its contents with `ip_addresses`

        file.write(ip_addresses)

# Call `update_file()` and pass in "allow_list.txt" and a list of IP addresses to be removed

update_file("data/allow_list.txt", ["192.168.25.60", "192.168.90.124", "192.168.60.153"])

# Build `with` statement to read in the updated file

with open("data/allow_list.txt", "r") as file:

    # Read in the updated file and store the contents in `text`

    text = file.read()

# Display the contents of `text`

print(text)
--------------------------------------------------------------------------------------------
